// SPDX-License-Identifier: GPL-2.0-or-later
/*
 * Copyright (C) 2018-2025 SCANOSS.COM
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

package usecase

import (
	"context"
	"errors"

	"github.com/jmoiron/sqlx"
	common "github.com/scanoss/papi/api/commonv2"
	pb "github.com/scanoss/papi/api/vulnerabilitiesv2"
	zlog "github.com/scanoss/zap-logging-helper/pkg/logger"

	"scanoss.com/vulnerabilities/pkg/adapters"
	myconfig "scanoss.com/vulnerabilities/pkg/config"
	"scanoss.com/vulnerabilities/pkg/dtos"
	"scanoss.com/vulnerabilities/pkg/helpers"
	"scanoss.com/vulnerabilities/pkg/models"
)

type IVulnerabilityUseCase interface {
	Execute(ctx context.Context, request *pb.VulnerabilityRequest) (*pb.VulnerabilityResponse, error)
}

type VulnerabilityUseCase struct {
	db     *sqlx.DB
	config *myconfig.ServerConfig
}

func NewVulnerabilityUseCase(ctx context.Context, db *sqlx.DB, config *myconfig.ServerConfig) *VulnerabilityUseCase {
	return &VulnerabilityUseCase{
		db:     db,
		config: config,
	}
}

func (us VulnerabilityUseCase) Execute(ctx context.Context, request *pb.VulnerabilityRequest) (*pb.VulnerabilityResponse, error) {
	zlog.S.Infof("Processing Vulnerabilities request: %v", request)
	// Make sure we have Vulnerability data to query
	vulnRequest := request.GetPurls()

	if len(vulnRequest) == 0 {
		statusResp := common.StatusResponse{Status: common.StatusCode_WARNING, Message: "No Vulnerability request data supplied"}
		return &pb.VulnerabilityResponse{Status: &statusResp}, errors.New("no request data supplied")
	}

	zlog.S.Infof("Getting DB Connection from pool: %v", ctx)
	conn, err := us.db.Connx(ctx) // Get a connection from the pool
	if err != nil {
		zlog.S.Errorf("Failed to get a database connection from the pool: %v", err)
		statusResp := common.StatusResponse{Status: common.StatusCode_FAILED, Message: "Failed to get database pool connection"}
		return &pb.VulnerabilityResponse{Status: &statusResp}, errors.New("problem getting database pool connection")
	}
	defer models.CloseConn(conn)
	// Sanitize request
	sanitizedRequests, err := adapters.FromVulnerabilityRequestToComponentDTO(request) // Convert to internal DTO for processing
	if err != nil {
		statusResp := common.StatusResponse{Status: common.StatusCode_WARNING, Message: "Problem parsing Vulnerability input data"}
		return &pb.VulnerabilityResponse{Status: &statusResp}, errors.New("problem parsing Vulnerability input data")
	}

	// Gets OSV vulnerabilities only if enabled
	var osvVulnerabilities = dtos.VulnerabilityOutput{}
	if us.config.Source.OSV.Enabled {
		zlog.S.Infof("vulnerabilities: OSV enabled")
		osvUseCase := NewOSVUseCase(us.config.Source.OSV.APIBaseURL, us.config.Source.OSV.InfoBaseURL)
		osvVulnerabilities = osvUseCase.Execute(sanitizedRequests)
	}
	// ************* OSV Use case end *************** /
	// Search the KB for information about each Vulnerability
	var localVulnerabilities = dtos.VulnerabilityOutput{}
	if us.config.Source.SCANOSS.Enabled {
		localVulUc := NewLocalVulnerabilitiesUseCase(ctx, conn, us.config)
		localVulnerabilities, err = localVulUc.GetVulnerabilities(sanitizedRequests)
		if err != nil {
			zlog.S.Errorf("Failed to get Vulnerabilities: %v", err)
			statusResp := common.StatusResponse{Status: common.StatusCode_WARNING, Message: "problems encountered extracting vulnerability data"}
			return &pb.VulnerabilityResponse{Status: &statusResp}, errors.New("problems encountered extracting vulnerability data")
		}
	}

	// Merge OSV and local vulnerabilities in one response. Avoids duplicated
	vulnerabilities := helpers.MergeOSVAndLocalVulnerabilities(localVulnerabilities, osvVulnerabilities)

	vulnResponse, err := adapters.ConvertVulnerabilityOutput(vulnerabilities) // Convert the internal data into a response object
	if err != nil {
		zlog.S.Errorf("Failed to parsed Vulnerabilities: %v", err)
		statusResp := common.StatusResponse{Status: common.StatusCode_FAILED, Message: "Problems encountered extracting Vulnerability data"}
		return &pb.VulnerabilityResponse{Status: &statusResp}, errors.New("problems encountered extracting vulnerability data")
	}

	statusResp := common.StatusResponse{Status: common.StatusCode_SUCCESS, Message: "Success"}

	return &pb.VulnerabilityResponse{Purls: vulnResponse.Purls, Status: &statusResp}, nil
}

// Optional: Type assertion to ensure VulnerabilityUseCase implements IVulnerabilityUseCase.
var _ IVulnerabilityUseCase = (*VulnerabilityUseCase)(nil)
