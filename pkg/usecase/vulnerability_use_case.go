package usecase

import (
	"context"
	"errors"
	"github.com/jmoiron/sqlx"
	common "github.com/scanoss/papi/api/commonv2"
	pb "github.com/scanoss/papi/api/vulnerabilitiesv2"
	"scanoss.com/vulnerabilities/pkg/adapters"
	myconfig "scanoss.com/vulnerabilities/pkg/config"
	zlog "scanoss.com/vulnerabilities/pkg/logger"
)

type IVulnerabilityUseCase interface {
	Execute(ctx context.Context, request *pb.VulnerabilityRequest) (*pb.VulnerabilityResponse, error)
}

type VulnerabilityUseCase struct {
	db     *sqlx.DB
	config *myconfig.ServerConfig
}

func NewVulnerabilityUseCase(db *sqlx.DB, config *myconfig.ServerConfig) *VulnerabilityUseCase {
	return &VulnerabilityUseCase{
		db:     db,
		config: config,
	}
}

// closeDbConnection closes the specified database connection
func closeDbConnection(conn *sqlx.Conn) {
	zlog.S.Debugf("Closing DB Connection: %v", conn)
	err := conn.Close()
	if err != nil {
		zlog.S.Warnf("Warning: Problem closing database connection: %v", err)
	}
}

func (us VulnerabilityUseCase) Execute(ctx context.Context, request *pb.VulnerabilityRequest) (*pb.VulnerabilityResponse, error) {
	zlog.S.Infof("Processing Vulnerabilities request: %v", request)
	// Make sure we have Vulnerability data to query
	vulnRequest := request.GetPurls()

	if vulnRequest == nil || len(vulnRequest) == 0 {
		statusResp := common.StatusResponse{Status: common.StatusCode_FAILED, Message: "No Vulnerability request data supplied"}
		return &pb.VulnerabilityResponse{Status: &statusResp}, errors.New("no request data supplied")
	}
	dtoRequest, err := adapters.ToVulnerabilityRequestDTO(request) // Convert to internal DTO for processing
	zlog.S.Infof("DTO REQUEST: %v", dtoRequest)
	if err != nil {
		statusResp := common.StatusResponse{Status: common.StatusCode_FAILED, Message: "Problem parsing Vulnerability input data"}
		return &pb.VulnerabilityResponse{Status: &statusResp}, errors.New("problem parsing Vulnerability input data")
	}
	zlog.S.Infof("Getting DB Connection from pool: %v", ctx)
	conn, err := us.db.Connx(ctx) // Get a connection from the pool
	if err != nil {
		zlog.S.Errorf("Failed to get a database connection from the pool: %v", err)
		statusResp := common.StatusResponse{Status: common.StatusCode_FAILED, Message: "Failed to get database pool connection"}
		return &pb.VulnerabilityResponse{Status: &statusResp}, errors.New("problem getting database pool connection")
	}
	defer closeDbConnection(conn)

	// ************* OSV Use case *************** /

	/*
			- Maybe put a limit (50)
			- No requirement Skip them , Add a log fot those purls that were skipped
		    - If no version (requirement) query the database for take one : See Pick one function


			LocalVulnerabilityUseCase

			- OSVUseCase
			- LocalUseCase


	*/

	osvUseCase := NewOSVUseCase(us.config.Vulnerabilities.OSVBaseURL)
	osvVulnerabilities := osvUseCase.Execute(dtoRequest)
	// ************* OSV Use case end *************** /

	// Search the KB for information about each Vulnerability
	/*	localVulUc := NewLocalVulnerabilitiesUseCase(ctx, conn, us.config)
		dtoVulnerabilities, err := localVulUc.GetVulnerabilities(dtoRequest)
		if err != nil {
			zlog.S.Errorf("Failed to get Vulnerabilities: %v", err)
			statusResp := common.StatusResponse{Status: common.StatusCode_FAILED, Message: "Problems encountered extracting Vulnerability data"}
			return &pb.VulnerabilityResponse{Status: &statusResp}, errors.New("Problems encountered extracting Vulnerability data")
		}*/

	vulnResponse, err := adapters.ConvertVulnerabilityOutput(osvVulnerabilities) // Convert the internal data into a response object
	if err != nil {
		zlog.S.Errorf("Failed to covnert parsed Vulnerabilities: %v", err)
		statusResp := common.StatusResponse{Status: common.StatusCode_FAILED, Message: "Problems encountered extracting Vulnerability data"}
		return &pb.VulnerabilityResponse{Status: &statusResp}, errors.New("Problems encountered extracting Vulnerability data")
	}
	// Set the status and respond with the data
	statusResp := common.StatusResponse{Status: common.StatusCode_SUCCESS, Message: "Success"}
	return &pb.VulnerabilityResponse{Purls: vulnResponse.Purls, Status: &statusResp}, nil
}

// Optional: Type assertion to ensure VulnerabilityUseCase implements IVulnerabilityUseCase
var _ IVulnerabilityUseCase = (*VulnerabilityUseCase)(nil)
