// SPDX-License-Identifier: GPL-2.0-or-later
/*
 * Copyright (C) 2018-2022 SCANOSS.COM
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

package usecase

import (
	"context"
	"errors"
	"fmt"
	"github.com/Masterminds/semver/v3"
	"github.com/jmoiron/sqlx"
	"regexp"
	myconfig "scanoss.com/vulnerabilities/pkg/config"
	"scanoss.com/vulnerabilities/pkg/dtos"
	zlog "scanoss.com/vulnerabilities/pkg/logger"
	"scanoss.com/vulnerabilities/pkg/models"
	"scanoss.com/vulnerabilities/pkg/utils"
)

var reRemoveConstraint = regexp.MustCompile(`>|<|=|>=|<=|~|!=`)
var reExtractSemver = regexp.MustCompile(`(?P<version>\d*\.?\d*\.?\d*)(?:-(?P<prerelease>(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+(?P<buildmetadata>[0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$`)

type VulnerabilityUseCase struct {
	ctx        context.Context
	conn       *sqlx.Conn
	vulnsPurl  *models.VulnsForPurlModel
	versionMod *models.VersionModel
}

// NewVulnerabilities creates a new instance of the vulnerability Use Case
func NewVulnerabilities(ctx context.Context, conn *sqlx.Conn, config *myconfig.ServerConfig) *VulnerabilityUseCase {
	return &VulnerabilityUseCase{ctx: ctx, conn: conn,
		vulnsPurl:  models.NewVulnsForPurlModel(ctx, conn),
		versionMod: models.NewVersionModel(ctx, conn)}
}

func (d VulnerabilityUseCase) GetVulnerabilities(request dtos.VulnerabilityInput) (dtos.VulnerabilityOutput, error) {

	var vulnOutputs []dtos.VulnerabilityPurlOutput

	var problems = false
	for _, purl := range request.Purls {
		if len(purl.Purl) == 0 {
			zlog.S.Infof("Empty Purl string supplied for: %v. Skipping", purl)
			continue
		}

		//VulnerabilitiesOutput
		var item dtos.VulnerabilityPurlOutput

		item.Purl = purl.Purl
		vulnPurls, err := d.vulnsPurl.GetVulnsByPurlName(purl.Purl)

		zlog.S.Debugf("Output vulnerabiliies: %v", vulnPurls)
		if err != nil {
			zlog.S.Errorf("Problem encountered extracting CPEs for: %v - %v.", purl, err)
			problems = true
			continue
			// TODO add a placeholder in the response?
		}

		//Group database results into a map. Key is a CVE string. Value is a CveData struct
		//This calculates a range of versions for a specific CVE
		//WARNING: The range could be semver complaint or not
		cveMap := GetCveMap(vulnPurls)

		//Takes version from purlString, if version not exist takes requirements and remove the constraint
		var versionToFilter string
		purlStruct, _ := utils.PurlFromString(purl.Purl)
		if len(purlStruct.Version) > 0 {
			versionToFilter = purlStruct.Version
		} else if len(purl.Requirement) > 0 {
			versionToFilter = reRemoveConstraint.ReplaceAllString(purl.Requirement, "")
		}

		//Try to coerce versionToFilter into semver complaint
		if len(versionToFilter) > 0 {
			//Check if versionToFilter is semver complaint
			if _, err = semver.NewVersion(versionToFilter); err != nil {

				cleanVersionToFilter := extractSemverLikeFromString(versionToFilter)
				if _, err := semver.NewVersion(cleanVersionToFilter); err == nil {
					versionToFilter = cleanVersionToFilter

				} else {
					//Last chance, get version from database
					version, err := d.versionMod.GetVersionByName(versionToFilter, false)
					if err != nil {
						zlog.S.Errorf("Problem encountered searching for version in DB: %v - %v.", versionToFilter, err)
						break
					}

					if len(version.SemVer) > 0 {
						versionToFilter = version.SemVer
					}
				}
			}
		}

		if len(versionToFilter) > 0 {
			cveMap.FilterByVersion(versionToFilter)
		}

		for cve, cveData := range cveMap {
			var vulnerabilitiesForThisPurl dtos.VulnerabilitiesOutput
			vulnerabilitiesForThisPurl.Cve = cve
			vulnerabilitiesForThisPurl.Severity = cveData.severity
			vulnerabilitiesForThisPurl.Introduced = cveData.minVersion
			vulnerabilitiesForThisPurl.Patched = cveData.maxVersion
			vulnerabilitiesForThisPurl.Url = cveData.url
			vulnerabilitiesForThisPurl.Source = "NVD"
			item.Vulnerabilities = append(item.Vulnerabilities, vulnerabilitiesForThisPurl)
		}

		vulnOutputs = append(vulnOutputs, item)
	}

	if problems {
		zlog.S.Errorf("Encountered issues while processing vulnerabilities: %v", request)
		return dtos.VulnerabilityOutput{}, errors.New("encountered issues while processing vulnerabilities")
	}

	return dtos.VulnerabilityOutput{Purls: vulnOutputs}, nil
}

/* 	UTILS	*/
func extractSemverLikeFromString(semverLike string) string {
	match := reExtractSemver.FindStringSubmatch(semverLike)
	if len(match) == 0 {
		return ""
	}

	result := make(map[string]string)
	for i, name := range reExtractSemver.SubexpNames() {
		if i != 0 && name != "" {
			result[name] = match[i]
		}
	}

	if len(result["prerelease"]) > 0 {
		result["prerelease"] = "-" + result["prerelease"]
	}

	if len(result["buildmetadata"]) > 0 {
		result["buildmetadata"] = "+" + result["buildmetadata"]
	}

	return fmt.Sprintf("%s%s%s", result["version"], result["prerelease"], result["buildmetadata"])
}

/* BEGINS VERSION RANGE SORTING */
type CveData struct {
	minVersion string
	maxVersion string
	severity   string
	url        string
}

type CveMap map[string]CveData

func GetCveMap(vulns []models.VulnsForPurl) CveMap {

	cveMap := make(CveMap)

	for _, vuln := range vulns {

		//Semver takes precendence over Version
		var newVersion string
		if len(vuln.Semver) > 0 {
			newVersion = vuln.Semver
		} else {
			newVersion = vuln.Version
		}

		cveData, ok := cveMap[vuln.Cve]
		if ok == true {
			cveData.UpdateVersionRange(newVersion)
			cveMap[vuln.Cve] = cveData
		} else {
			url := fmt.Sprintf("https://nvd.nist.gov/vuln/detail/%s", vuln.Cve)

			cveMap[vuln.Cve] = CveData{minVersion: newVersion,
				maxVersion: newVersion,
				severity:   vuln.Severity,
				url:        url}
		}

	}
	return cveMap
}

func (m *CveMap) FilterByVersion(version string) {

	isVersionSemver := true
	v, err := semver.NewVersion(version)
	if err != nil {
		zlog.S.Debugf("Error building version for: %v - %v", version, err)
		isVersionSemver = false
	}

	for cve, cveData := range *m {

		// is Version outside the range (using semver)? if so, delete the CVE from map
		isConstraintSemver := true
		if isVersionSemver == true {
			constraint := cveData.minVersion + " - " + cveData.maxVersion
			c, err := semver.NewConstraint(constraint)
			if err == nil {
				if c.Check(v) == false {
					delete(*m, cve)
				}
			} else {
				isConstraintSemver = false
			}
		}

		//is Version outside the range (using alphabetically comparision)? if so, delete the CVE from map
		if isVersionSemver == false || isConstraintSemver == false {
			if Less(version, cveData.minVersion) || Less(cveData.maxVersion, version) {
				delete(*m, cve)
			}
		}

	}
}

func (c *CveData) UpdateVersionRange(newVersion string) {
	if Less(newVersion, c.minVersion) {
		c.minVersion = newVersion
	} else if Less(c.maxVersion, newVersion) {
		c.maxVersion = newVersion
	}
}

func Less(a, b string) bool {
	// try to build semvers, if both works use semver LessThan
	aVer, aErr := semver.NewVersion(a)
	bVer, bErr := semver.NewVersion(b)

	if aErr == nil && bErr == nil {
		return aVer.LessThan(bVer)
	} else {
		return a < b
	}
}
