// SPDX-License-Identifier: GPL-2.0-or-later
/*
 * Copyright (C) 2018-2022 SCANOSS.COM
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

package usecase

import (
	"context"
	"errors"
	"fmt"
	"github.com/Masterminds/semver/v3"
	"github.com/jmoiron/sqlx"
	"regexp"
	myconfig "scanoss.com/vulnerabilities/pkg/config"
	"scanoss.com/vulnerabilities/pkg/dtos"
	zlog "scanoss.com/vulnerabilities/pkg/logger"
	"scanoss.com/vulnerabilities/pkg/models"
	"scanoss.com/vulnerabilities/pkg/utils"
)

type VulnerabilityUseCase struct {
	ctx       context.Context
	conn      *sqlx.Conn
	vulnsPurl *models.VulnsForPurlModel
}

// NewVulnerabilities creates a new instance of the vulnerability Use Case
func NewVulnerabilities(ctx context.Context, conn *sqlx.Conn, config *myconfig.ServerConfig) *VulnerabilityUseCase {
	return &VulnerabilityUseCase{ctx: ctx, conn: conn, vulnsPurl: models.NewVulnsForPurlModel(ctx, conn)}
}

func (d VulnerabilityUseCase) GetVulnerabilities(request dtos.VulnerabilityInput) (dtos.VulnerabilityOutput, error) {

	var vulnOutputs []dtos.VulnerabilityPurlOutput

	var problems = false
	for _, purl := range request.Purls {
		if len(purl.Purl) == 0 {
			zlog.S.Infof("Empty Purl string supplied for: %v. Skipping", purl)
			continue
		}
		//VulnerabilitiesOutput
		var item dtos.VulnerabilityPurlOutput

		item.Purl = purl.Purl
		vulnPurls, err := d.vulnsPurl.GetVulnsByPurlName(purl.Purl)

		zlog.S.Debugf("Output vulnerabiliies: %v", vulnPurls)
		if err != nil {
			zlog.S.Errorf("Problem encountered extracting CPEs for: %v - %v.", purl, err)
			problems = true
			continue
			// TODO add a placeholder in the response?
		}

		//Group database results into a map. Key is a specific CVE and data is a CveData struct
		cveMap := GetCveMap(vulnPurls)

		purlStruct, err := utils.PurlFromString(purl.Purl)
		if err != nil {
			zlog.S.Errorf("Problem encountered parsing purl for: %v - %v.", purl, err)
			continue
		}

		if len(purlStruct.Version) > 0 { // No version specified, but we might have a specific version in the Requirement
			purl.Requirement = purlStruct.Version
		}

		if len(purl.Requirement) > 0 {
			cveMap.FilterByRequirement(purl.Requirement)
		}

		for cve, cveData := range cveMap {
			var vulnerabilitiesForThisPurl dtos.VulnerabilitiesOutput
			vulnerabilitiesForThisPurl.Cve = cve
			vulnerabilitiesForThisPurl.Severity = cveData.severity
			vulnerabilitiesForThisPurl.Introduced = cveData.minVersion
			vulnerabilitiesForThisPurl.Patched = cveData.maxVersion
			vulnerabilitiesForThisPurl.Url = cveData.url
			vulnerabilitiesForThisPurl.Source = "NVD"
			item.Vulnerabilities = append(item.Vulnerabilities, vulnerabilitiesForThisPurl)
		}

		vulnOutputs = append(vulnOutputs, item)
	}

	if problems {
		zlog.S.Errorf("Encountered issues while processing vulnerabilities: %v", request)
		return dtos.VulnerabilityOutput{}, errors.New("encountered issues while processing vulnerabilities")
	}

	return dtos.VulnerabilityOutput{Purls: vulnOutputs}, nil
}

/* BEGINS VERSION RANGE SORTING */

type CveData struct {
	minVersion string
	maxVersion string
	severity   string
	url        string
}

type CveMap map[string]CveData

func GetCveMap(vulns []models.VulnsForPurl) CveMap {

	cveMap := make(CveMap)

	for _, vuln := range vulns {

		//Semver takes precendence over Version
		var newVersion string
		if len(vuln.Semver) > 0 {
			newVersion = vuln.Semver
		} else {
			newVersion = vuln.Version
		}

		cveData, ok := cveMap[vuln.Cve]
		if ok == true {
			cveData.UpdateVersionRange(newVersion)
			cveMap[vuln.Cve] = cveData
		} else {
			url := fmt.Sprintf("https://nvd.nist.gov/vuln/detail/%s", vuln.Cve)

			cveMap[vuln.Cve] = CveData{minVersion: newVersion,
				maxVersion: newVersion,
				severity:   vuln.Severity,
				url:        url}
		}

	}
	return cveMap
}

func (m *CveMap) FilterByRequirement(req string) {
	re := regexp.MustCompile(`>|<|=|>=|<=|~|!=`)

	cleanReq := re.ReplaceAllString(req, "")
	v, err := semver.NewVersion(cleanReq)
	if err != nil {
		zlog.S.Debugf("Error building version from requirement for req=%v - %v", req, err)
		return
	}

	for cve, cveData := range *m {

		constraint := cveData.minVersion + " - " + cveData.maxVersion
		c, err := semver.NewConstraint(constraint)
		//TODO What to do when limits are not semver complaint
		if err != nil {
			zlog.S.Debugf("Error building constraint for %v: %v - %v. error: %v", cve, cveData.minVersion, cveData.maxVersion, err)
			continue
		}

		if c.Check(v) == false {
			delete(*m, cve)
		}

	}
}

func (c *CveData) UpdateVersionRange(newVersion string) {
	if Less(newVersion, c.minVersion) {
		c.minVersion = newVersion
	} else if Less(c.maxVersion, newVersion) {
		c.maxVersion = newVersion
	}
}

func Less(a, b string) bool {
	// try to build semvers, if both works use semver LessThan
	aVer, aErr := semver.NewVersion(a)
	bVer, bErr := semver.NewVersion(b)

	if aErr == nil && bErr == nil {
		return aVer.LessThan(bVer)
	} else {
		return a < b
	}

}
