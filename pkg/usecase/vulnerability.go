// SPDX-License-Identifier: GPL-2.0-or-later
/*
 * Copyright (C) 2018-2022 SCANOSS.COM
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

package usecase

import (
	"context"
	"errors"

	"github.com/jmoiron/sqlx"
	myconfig "scanoss.com/vulnerabilities/pkg/config"
	"scanoss.com/vulnerabilities/pkg/dtos"
	zlog "scanoss.com/vulnerabilities/pkg/logger"
	"scanoss.com/vulnerabilities/pkg/models"
)

type VulnerabilityUseCase struct {
	ctx       context.Context
	conn      *sqlx.Conn
	vulnsPurl *models.VulnsForPurlModel
}

// NewVulnerabilities creates a new instance of the vulnerability Use Case
func NewVulnerabilities(ctx context.Context, conn *sqlx.Conn, config *myconfig.ServerConfig) *VulnerabilityUseCase {
	return &VulnerabilityUseCase{ctx: ctx, conn: conn, vulnsPurl: models.NewVulnsForPurlModel(ctx, conn)}
}

func (d VulnerabilityUseCase) GetVulnerabilities(request dtos.VulnerabilityInput) (dtos.VulnerabilityOutput, error) {

	var vulnOutputs []dtos.VulnerabilityPurlOutput

	var problems = false
	for _, purl := range request.Purls {
		if len(purl.Purl) == 0 {
			zlog.S.Infof("Empty Purl string supplied for: %v. Skipping", purl)
			continue
		}
		//VulnerabilitiesOutput
		var item dtos.VulnerabilityPurlOutput

		item.Purl = purl.Purl
		//llamo a la query
		//	d.vulnsPurl.GetVulnsByPurlName(purl.Purl)
		vulnPurls, err := d.vulnsPurl.GetVulnsByPurlName(purl.Purl)
		//EN ESTE PUNTO HAY QUE HACER MAGIA Y SACAR RANGOS, CONSULTAR REQUIREMENTS, ETC
		zlog.S.Debugf("Output vulnerabiliies: %v", vulnPurls)
		if err != nil {
			zlog.S.Errorf("Problem encountered extracting CPEs for: %v - %v.", purl, err)
			problems = true
			continue
			// TODO add a placeholder in the response?
		}
		//Para todos los resultados de la query
		for res := range vulnPurls {

			var vulnerabilitiesForThisPurl dtos.VulnerabilitiesOutput
			vulnerabilitiesForThisPurl.Cve = vulnPurls[res].Cve
			vulnerabilitiesForThisPurl.Severity = vulnPurls[res].Severity
			vulnerabilitiesForThisPurl.Summary = vulnPurls[res].Summary

			item.Vulnerabilities = append(item.Vulnerabilities, vulnerabilitiesForThisPurl)
		}

		vulnOutputs = append(vulnOutputs, item)
	}

	if problems {
		zlog.S.Errorf("Encountered issues while processing vulnerabilities: %v", request)
		return dtos.VulnerabilityOutput{}, errors.New("encountered issues while processing vulnerabilities")
	}

	return dtos.VulnerabilityOutput{Purls: vulnOutputs}, nil
}
