// SPDX-License-Identifier: GPL-2.0-or-later
/*
 * Copyright (C) 2018-2025 SCANOSS.COM
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

package usecase

import (
	"context"
	"fmt"
	"testing"

	"scanoss.com/vulnerabilities/pkg/dtos"

	myconfig "scanoss.com/vulnerabilities/pkg/config"

	"github.com/jmoiron/sqlx"
	_ "github.com/mattn/go-sqlite3"
	zlog "github.com/scanoss/zap-logging-helper/pkg/logger"
	"scanoss.com/vulnerabilities/pkg/models"
)

func TestVulnerabilityUseCase(t *testing.T) {
	ctx := context.Background()
	err := zlog.NewSugaredDevLogger()
	if err != nil {
		t.Fatalf("an error '%s' was not expected when opening a sugared logger", err)
	}
	defer zlog.SyncZap()
	db, err := sqlx.Connect("sqlite3", "file::memory:?cache=shared&uri=true")
	if err != nil {
		t.Fatalf("an error '%s' was not expected when opening a stub database connection", err)
	}
	defer models.CloseDB(db)
	conn, err := db.Connx(ctx) // Get a connection from the pool
	if err != nil {
		t.Fatalf("an error '%s' was not expected when opening a stub database connection", err)
	}
	defer models.CloseConn(conn)
	err = models.LoadTestSQLData(db, ctx, conn)
	if err != nil {
		t.Fatalf("an error '%v' was not expected when loading test data", err)
	}
	serverConfig, err := myconfig.NewServerConfig(nil)
	if err != nil {
		t.Fatalf("an error '%s' was not expected when loading server config", err)
	}
	serverConfig.Source.OSV.Enabled = false
	vulnUseCase := NewVulnerabilityUseCase(ctx, db, serverConfig)

	tests := []struct {
		name string
		req  []dtos.ComponentDTO
	}{
		// FIXME: Make this query pkg/models/vulns_purl.go::GetVulnsByPurl() generic for Postgres and SQLite.
		// Current implementation uses Postgres-specific syntax that breaks on SQLite
		/*		{
					name: "Component with requirement",
					req: []dtos.ComponentDTO{
						{
							Purl:        "pkg:github/tseliot/screen-resolution-extra",
							Requirement: "15.0.0",
						},
					},
				},
				{
					name: "Component with requirement - simple PURL",
					req: []dtos.ComponentDTO{
						{
							Purl:        "pkg:npm/comb",
							Requirement: "1.0.0",
						},
					},
				},*/
		{
			name: "Component without requirement",
			req: []dtos.ComponentDTO{
				{
					Purl: "pkg:npm/comb",
				},
			},
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			r, err := vulnUseCase.Execute(ctx, tt.req)
			fmt.Printf("Response: %v", r)
			if err != nil {
				t.Errorf("an error '%s' was not expected when executing the use case", err)
			}
		})
	}
}
