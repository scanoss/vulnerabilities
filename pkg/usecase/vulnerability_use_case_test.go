package usecase

import (
	"context"
	"testing"

	pb "github.com/scanoss/papi/api/vulnerabilitiesv2"
	myconfig "scanoss.com/vulnerabilities/pkg/config"

	"github.com/jmoiron/sqlx"
	"github.com/scanoss/papi/api/commonv2"
	zlog "github.com/scanoss/zap-logging-helper/pkg/logger"
	"scanoss.com/vulnerabilities/pkg/models"
)

func TestVulnerabilityUseCase(t *testing.T) {
	ctx := context.Background()
	err := zlog.NewSugaredDevLogger()
	if err != nil {
		t.Fatalf("an error '%s' was not expected when opening a sugared logger", err)
	}
	defer zlog.SyncZap()
	db, err := sqlx.Connect("sqlite3", ":memory:")
	if err != nil {
		t.Fatalf("an error '%s' was not expected when opening a stub database connection", err)
	}
	defer models.CloseDB(db)
	conn, err := db.Connx(ctx) // Get a connection from the pool
	if err != nil {
		t.Fatalf("an error '%s' was not expected when opening a stub database connection", err)
	}
	defer models.CloseConn(conn)
	err = models.LoadTestSQLData(db, ctx, conn)
	if err != nil {
		t.Fatalf("an error '%v' was not expected when loading test data", err)
	}
	serverConfig, err := myconfig.NewServerConfig(nil)
	if err != nil {
		t.Fatalf("an error '%s' was not expected when loading server config", err)
	}
	serverConfig.Source.SCANOSS.Enabled = false
	vulnUseCase := NewVulnerabilityUseCase(ctx, db, serverConfig)

	tests := []struct {
		name           string
		req            pb.VulnerabilityRequest
		expectedStatus commonv2.StatusCode
	}{
		{
			name: "Invalid req",
			req: pb.VulnerabilityRequest{
				Purls: []*pb.VulnerabilityRequest_Purls{
					{
						Purl: "g:golang/example@1.0.0",
					},
					{
						Purl: "g:npm/lodash@4.17.21",
					},
				},
			},
			expectedStatus: commonv2.StatusCode_SUCCEEDED_WITH_WARNINGS,
		},
		{
			name: "Valid req with requirement",
			req: pb.VulnerabilityRequest{
				Purls: []*pb.VulnerabilityRequest_Purls{
					{
						Purl:        "pkg:pypi/mlflow",
						Requirement: "2.3.0",
					},
				},
			},
			expectedStatus: commonv2.StatusCode_SUCCESS,
		},
		{
			name: "Valid req with requirement appended to purl",
			req: pb.VulnerabilityRequest{
				Purls: []*pb.VulnerabilityRequest_Purls{
					{
						Purl: "pkg:pypi/mlflow@2.3.0",
					},
				},
			},
			expectedStatus: commonv2.StatusCode_SUCCESS,
		},
	}
	for i := range tests {
		tt := &tests[i]
		t.Run(tt.name, func(t *testing.T) {
			r, _ := vulnUseCase.Execute(ctx, &tt.req)
			if tt.expectedStatus != r.Status.GetStatus() {
				t.Errorf("expected status %v, but received %v", tt.expectedStatus, r.Status)
			}
		})
	}
}
