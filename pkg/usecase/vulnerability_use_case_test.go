package usecase

import (
	"context"
	"fmt"
	"scanoss.com/vulnerabilities/pkg/dtos"
	"testing"

	myconfig "scanoss.com/vulnerabilities/pkg/config"

	"github.com/jmoiron/sqlx"
	_ "github.com/mattn/go-sqlite3"
	zlog "github.com/scanoss/zap-logging-helper/pkg/logger"
	"scanoss.com/vulnerabilities/pkg/models"
)

func TestVulnerabilityUseCase(t *testing.T) {
	ctx := context.Background()
	err := zlog.NewSugaredDevLogger()
	if err != nil {
		t.Fatalf("an error '%s' was not expected when opening a sugared logger", err)
	}
	defer zlog.SyncZap()
	db, err := sqlx.Connect("sqlite3", "file::memory:?cache=shared&uri=true")
	if err != nil {
		t.Fatalf("an error '%s' was not expected when opening a stub database connection", err)
	}
	defer models.CloseDB(db)
	conn, err := db.Connx(ctx) // Get a connection from the pool
	if err != nil {
		t.Fatalf("an error '%s' was not expected when opening a stub database connection", err)
	}
	defer models.CloseConn(conn)
	err = models.LoadTestSQLData(db, ctx, conn)
	if err != nil {
		t.Fatalf("an error '%v' was not expected when loading test data", err)
	}
	serverConfig, err := myconfig.NewServerConfig(nil)
	if err != nil {
		t.Fatalf("an error '%s' was not expected when loading server config", err)
	}
	serverConfig.Source.OSV.Enabled = false
	vulnUseCase := NewVulnerabilityUseCase(ctx, db, serverConfig)

	tests := []struct {
		name string
		req  []dtos.ComponentDTO
	}{
		{
			name: "Valid req with requirement",
			req: []dtos.ComponentDTO{
				{
					Purl:        "pkg:github/tseliot/screen-resolution-extra",
					Requirement: "15.0.0",
				},
			},
		},
		{
			name: "Valid req with requirement - simple PURL",
			req: []dtos.ComponentDTO{
				{
					Purl:        "pkg:npm/comb",
					Requirement: "1.0.0",
				},
			},
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			r, err := vulnUseCase.Execute(ctx, tt.req)
			fmt.Printf("Response: %v", r)
			if err != nil {
				t.Errorf("an error '%s' was not expected when executing the use case", err)
			}
		})
	}
}
