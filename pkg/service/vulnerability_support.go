// SPDX-License-Identifier: GPL-2.0-or-later
/*
 * Copyright (C) 2018-2023 SCANOSS.COM
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

package service

import (
	"encoding/json"
	"errors"

	pb "github.com/scanoss/papi/api/vulnerabilitiesv2"
	"scanoss.com/vulnerabilities/pkg/dtos"
	zlog "scanoss.com/vulnerabilities/pkg/logger"
)

// convertVulnerabilityInput converts a Vulnerability Request structure into an internal Vulnerability Input struct
func convertVulnerabilityInput(request *pb.VulnerabilityRequest) (dtos.VulnerabilityInput, error) {
	data, err := json.Marshal(request)
	if err != nil {
		zlog.S.Errorf("Problem marshalling vulnerability request input: %v", err)
		return dtos.VulnerabilityInput{}, errors.New("problem marshalling vulnerability input")
	}
	dtoRequest, err := dtos.ParseVulnerabilityInput(data)
	if err != nil {
		zlog.S.Errorf("Problem parsing vulnerability request input: %v", err)
		return dtos.VulnerabilityInput{}, errors.New("problem parsing vulnerability input")
	}
	return dtoRequest, nil
}

// convertVulnerabilityOutput converts an internal Vulnerability Output structure into a Vulneravility Response struct
func convertVulnerabilityOutput(output dtos.VulnerabilityOutput) (*pb.VulnerabilityResponse, error) {
	data, err := json.Marshal(output)
	if err != nil {
		zlog.S.Errorf("Problem marshalling vulns request output: %v", err)
		return &pb.VulnerabilityResponse{}, errors.New("problem marshalling vulns output")
	}
	zlog.S.Debugf("Parsed data: %v", string(data))
	var vulnResp pb.VulnerabilityResponse
	err = json.Unmarshal(data, &vulnResp)
	if err != nil {
		zlog.S.Errorf("Problem unmarshalling Vulnerability request output: %v", err)
		return &pb.VulnerabilityResponse{}, errors.New("problem unmarshalling vulnerability output")
	}
	return &vulnResp, nil
}

// convertCPEOutput converts an internal CPE Output structure into a Cpe Response struct
func convertCPEOutput(output dtos.CpeOutput) (*pb.CpeResponse, error) {
	data, err := json.Marshal(output)
	if err != nil {
		zlog.S.Errorf("Problem marshalling CPEs request output: %v", err)
		return &pb.CpeResponse{}, errors.New("problem marshalling CPEs output")
	}
	zlog.S.Debugf("Parsed data: %v", string(data))
	var cpeResp pb.CpeResponse
	err = json.Unmarshal(data, &cpeResp)
	if err != nil {
		zlog.S.Errorf("Problem unmarshalling CPEs request output: %v", err)
		return &pb.CpeResponse{}, errors.New("problem unmarshalling CPEs output")
	}
	return &cpeResp, nil
}
