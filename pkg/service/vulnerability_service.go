// SPDX-License-Identifier: GPL-2.0-or-later
/*
 * Copyright (C) 2018-2023 SCANOSS.COM
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

// Package service implements the gRPC service endpoints
package service

import (
	"context"
	"errors"
	"github.com/jmoiron/sqlx"
	common "github.com/scanoss/papi/api/commonv2"
	pb "github.com/scanoss/papi/api/vulnerabilitiesv2"
	"scanoss.com/vulnerabilities/pkg/adapters"
	myconfig "scanoss.com/vulnerabilities/pkg/config"
	zlog "scanoss.com/vulnerabilities/pkg/logger"
	"scanoss.com/vulnerabilities/pkg/usecase"
)

type vulnerabilityServer struct {
	pb.VulnerabilitiesServer
	db     *sqlx.DB
	config *myconfig.ServerConfig
}

// NewVulnerabilityServer creates a new instance of Vulnerability Server
func NewVulnerabilityServer(db *sqlx.DB, config *myconfig.ServerConfig) pb.VulnerabilitiesServer {
	return &vulnerabilityServer{db: db, config: config}
}

// Echo sends back the same message received
func (d vulnerabilityServer) Echo(ctx context.Context, request *common.EchoRequest) (*common.EchoResponse, error) {
	zlog.S.Infof("Received (%v): %v", ctx, request.GetMessage())
	return &common.EchoResponse{Message: request.GetMessage()}, nil
}

// GetDVulnerabilities searches for information about the supplied Vulnerabilities
func (d vulnerabilityServer) GetVulnerabilities(ctx context.Context, request *pb.VulnerabilityRequest) (*pb.VulnerabilityResponse, error) {
	vulUseCase := usecase.NewVulnerabilityUseCase(d.db, d.config)
	return vulUseCase.Execute(ctx, request)
}

func (d vulnerabilityServer) GetCpes(ctx context.Context, request *pb.VulnerabilityRequest) (*pb.CpeResponse, error) {

	vulnRequest := request.GetPurls()
	if vulnRequest == nil || len(vulnRequest) == 0 {
		statusResp := common.StatusResponse{Status: common.StatusCode_FAILED, Message: "No Vulnerability request data supplied"}
		return &pb.CpeResponse{Status: &statusResp}, errors.New("no request data supplied")
	}
	dtoRequest, err := adapters.ToVulnerabilityRequestDTO(request) // Convert to internal DTO for processing
	if err != nil {
		statusResp := common.StatusResponse{Status: common.StatusCode_FAILED, Message: "Problem parsing Vulnerability input data"}
		return &pb.CpeResponse{Status: &statusResp}, errors.New("problem parsing Vulnerability input data")
	}
	conn, err := d.db.Connx(ctx) // Get a connection from the pool
	if err != nil {
		zlog.S.Errorf("Failed to get a database connection from the pool: %v", err)
		statusResp := common.StatusResponse{Status: common.StatusCode_FAILED, Message: "Failed to get database pool connection"}
		return &pb.CpeResponse{Status: &statusResp}, errors.New("problem getting database pool connection")
	}
	defer closeDbConnection(conn)
	// Search the KB for information about each Vulnerability
	cpeUc := usecase.NewCpe(ctx, conn, d.config)
	dtoCpes, err := cpeUc.GetCpes(dtoRequest)
	if err != nil {
		zlog.S.Errorf("Failed to get Vulnerabilites: %v", err)
		statusResp := common.StatusResponse{Status: common.StatusCode_FAILED, Message: "Problems encountered extracting Vulnerability data"}
		return &pb.CpeResponse{Status: &statusResp}, nil
	}

	cpeResponse, err := adapters.ConvertCPEOutput(dtoCpes) // Convert the internal data into a response object
	if err != nil {
		zlog.S.Errorf("Failed to covnert parsed Vulnerabilities: %v", err)
		statusResp := common.StatusResponse{Status: common.StatusCode_FAILED, Message: "Problems encountered extracting Vulnerability data"}
		return &pb.CpeResponse{Status: &statusResp}, nil
	}

	statusResp := common.StatusResponse{Status: common.StatusCode_SUCCESS, Message: "Success"}
	return &pb.CpeResponse{Purls: cpeResponse.Purls, Status: &statusResp}, nil
}

// closeDbConnection closes the specified database connection
func closeDbConnection(conn *sqlx.Conn) {
	zlog.S.Debugf("Closing DB Connection: %v", conn)
	err := conn.Close()
	if err != nil {
		zlog.S.Warnf("Warning: Problem closing database connection: %v", err)
	}
}
