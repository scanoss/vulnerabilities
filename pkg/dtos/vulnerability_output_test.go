// SPDX-License-Identifier: GPL-2.0-or-later
/*
 * Copyright (C) 2018-2022 SCANOSS.COM
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

package dtos

import (
	"fmt"
	"testing"

	zlog "scanoss.com/vulnerabilities/pkg/logger"
)

func TestEmptyVulnerabilitiesOutput(t *testing.T) {
	var outputJson = `{
    "purls": [
      {
        "purl":"pkg:github/scanoss/audit-workbench",
        "vulnerabilities": []
      }
    ]
}`
	err := zlog.NewSugaredDevLogger()
	if err != nil {
		t.Fatalf("an error '%s' was not expected when opening a sugared logger", err)
	}
	defer zlog.SyncZap()
	output, err := ParseVulnerabilityOutput([]byte(outputJson))
	if err != nil {
		t.Errorf("dtos.ParseDependencyInput() error = %v", err)
	}
	t.Log("Parsed output object: ", output)
}
func TestVulnerabilitiesOutput(t *testing.T) {
	/*CVE-2019-15619
	  CVE-2019-15619*/
	var outputJson = `{
    "purls": [
      {
        "purl":"pkg:github/nextcloud/deck",
        "vulnerabilities": [
          { "id":"MyId",
            "cve":"CVE-2019-15619",
            "url":"https://nvd.nist.gov/vuln/detail/CVE-2019-15619",
            "summary":"https://nvd.nist.gov/vuln/detail/CVE-2019-15619",
            "severity":"MEDIUM",
            "introduced":"0.1.0",
            "reported":"0.1.3",
            "patched":"0.6.5",
            "source":"NDV"
          },
          { "id":"MyId2",
            "cve":"CVE-2020-8179",
            "url":"https://nvd.nist.gov/vuln/detail/CVE-2020-8179",
            "summary":"https://nvd.nist.gov/vuln/detail/CVE-2020-8179",
            "severity":"MEDIUM",
            "introduced":"0.1.0",
            "reported":"0.1.3",
            "patched":"0.6.5",
            "source":"NDV"
          }
        ]
      }
    ]
  }
`
	err := zlog.NewSugaredDevLogger()
	if err != nil {
		t.Fatalf("an error '%s' was not expected when opening a sugared logger", err)
	}
	defer zlog.SyncZap()
	output, err := ParseVulnerabilityOutput([]byte(outputJson))
	if err != nil {
		t.Errorf("dtos.ParseVulnerabilityOutput() error = %v", err)
	}
	fmt.Println("Parsed output object: ", output)

	_, err = ParseVulnerabilityOutput(nil)
	if err == nil {
		t.Errorf("dtos.ParseVulnerabilityOutput() did not fail")
	}
	var badJson = `{ "purls": [ `
	_, err = ParseVulnerabilityOutput([]byte(badJson))
	if err == nil {
		t.Errorf("dtos.ParseVulnerabilityOutput() did not fail")
	}
	/*
		data, err := ExportDependencyOutput(output)
		if err != nil {
			t.Errorf("dtos.ParseDependencyInput() error = %v", err)

		}
		fmt.Println("Exported output data: ", data)


		fmt.Println("get expected error: ", err)

		var badJson = `{ "files": [ `
		_, err = ParseDependencyOutput([]byte(badJson))
		if err == nil {
			t.Errorf("dtos.ParseDependencyOutput() did not fail")
		}
		fmt.Println("get expected error: ", err)*/
}
