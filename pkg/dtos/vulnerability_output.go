// SPDX-License-Identifier: GPL-2.0-or-later
/*
 * Copyright (C) 2018-2022 SCANOSS.COM
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

package dtos

import (
	"encoding/json"
	"errors"
	"fmt"

	zlog "scanoss.com/vulnerabilities/pkg/logger"
)

type VulnerabilityOutput struct {
	Purls []VulnerabilityPurlOutput `json:"purls"`
}
type CpeOutput struct {
	Purls []CpePurlOutput `json:"purls"`
}

type VulnerabilityPurlOutput struct {
	Purl            string                  `json:"purl"`
	Vulnerabilities []VulnerabilitiesOutput `json:"vulnerabilities"`
}
type CpePurlOutput struct {
	Purl string   `json:"purl"`
	Cpes []string `json:"cpes"`
}

type VulnerabilitiesOutput struct {
	Id         string `json:"id"`
	Cve        string `json:"cve"`
	Url        string `json:"url"`
	Summary    string `json:"summary"`
	Severity   string `json:"severity"`
	Introduced string `json:"introduced"`
	Reported   string `json:"reported"`
	Patched    string `json:"patched"`
	Source     string `json:"source"`
}

// ExportVulnerabilityOutput converts the vulnerabilityOutput structure to a byte array
func ExportVulnerabilityOutput(output VulnerabilityOutput) ([]byte, error) {
	data, err := json.Marshal(output)
	if err != nil {
		zlog.S.Errorf("Parse failure: %v", err)
		return nil, errors.New("failed to produce JSON from vulnerability output data")
	}
	return data, nil
}

// ParseVulnerabilityOutput converts the input byte array to a VulnerabilityOutput structure
func ParseVulnerabilityOutput(input []byte) (VulnerabilityPurlOutput, error) {
	if input == nil || len(input) == 0 {
		return VulnerabilityPurlOutput{}, errors.New("no output vulnerability data supplied to parse")
	}
	var data VulnerabilityPurlOutput
	err := json.Unmarshal(input, &data)
	if err != nil {
		zlog.S.Errorf("Parse failure: %v", err)
		return VulnerabilityPurlOutput{}, errors.New(fmt.Sprintf("failed to parse vulnerability output data: %v", err))
	}
	zlog.S.Debugf("Parsed data2: %v", data)
	return data, nil
}
