package adapters

import (
	"fmt"
	"testing"

	_ "github.com/mattn/go-sqlite3"
	pb "github.com/scanoss/papi/api/vulnerabilitiesv2"
	zlog "github.com/scanoss/zap-logging-helper/pkg/logger"

	"scanoss.com/vulnerabilities/pkg/dtos"
)

func TestVulnOutputConvert(t *testing.T) {
	err := zlog.NewSugaredDevLogger()
	if err != nil {
		t.Fatalf("an error '%s' was not expected when opening a sugared logger", err)
	}
	defer zlog.SyncZap()

	var outputDto = dtos.VulnerabilityOutput{}

	output, err := ConvertVulnerabilityOutput(outputDto)
	if err != nil {
		t.Errorf("TestOutputConvert failed: %v", err)
	}
	fmt.Printf("Output: %v\n", output)
}

func TestCpeOutputConvert(t *testing.T) {
	var outputDto = []dtos.CpeComponentOutput{}
	output, err := ConvertCPEOutput(outputDto)
	if err != nil {
		t.Errorf("TestCpeOutputConvert failed: %v", err)
	}
	fmt.Printf("Output: %v\n", output)
}

func TestVulnInputConvertEmptyRequest(t *testing.T) {

	tests := []struct {
		input             *pb.VulnerabilityRequest
		expectError       bool
		name              string
		validComponents   []dtos.ComponentDTO
		invalidComponents []dtos.ComponentDTO
	}{
		{
			input:             &pb.VulnerabilityRequest{},
			expectError:       true,
			name:              "Empty request",
			validComponents:   []dtos.ComponentDTO{},
			invalidComponents: []dtos.ComponentDTO{},
		},
		{
			input: &pb.VulnerabilityRequest{Purls: []*pb.VulnerabilityRequest_Purls{
				{
					Purl: "g:golang/example@1.0.0",
				},
				{
					Purl: "pkg:github/lodash@4.17.21",
				},
			}},
			expectError: false,
			name:        "Valid request",
			validComponents: []dtos.ComponentDTO{
				{
					Purl: "pkg:github/lodash@4.17.21",
				},
			},
			invalidComponents: []dtos.ComponentDTO{
				{
					Purl: "g:golang/example@1.0.0",
				},
			},
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {

			components, invalidComponents, err := FromVulnerabilityRequestToComponentDTO(tt.input)

			if tt.expectError && err == nil {
				t.Error("expected error but got none")
			}
			if !tt.expectError && err != nil {
				t.Errorf("unexpected error: %v", err)
			}

			if len(components) != len(tt.validComponents) {
				t.Errorf("expected %d components but got %d", len(tt.validComponents), len(components))
			}
			if len(invalidComponents) != len(tt.invalidComponents) {
				t.Errorf("expected %d invalid components but got %d", len(tt.invalidComponents), len(invalidComponents))
			}
		})
	}

}
