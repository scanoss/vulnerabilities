package adapters

import (
	"context"
	"fmt"
	"testing"

	"github.com/jmoiron/sqlx"
	_ "github.com/mattn/go-sqlite3"
	pb "github.com/scanoss/papi/api/vulnerabilitiesv2"
	zlog "github.com/scanoss/zap-logging-helper/pkg/logger"

	myconfig "scanoss.com/vulnerabilities/pkg/config"
	"scanoss.com/vulnerabilities/pkg/dtos"
	"scanoss.com/vulnerabilities/pkg/models"
)

func TestVulnOutputConvert(t *testing.T) {
	err := zlog.NewSugaredDevLogger()
	if err != nil {
		t.Fatalf("an error '%s' was not expected when opening a sugared logger", err)
	}
	defer zlog.SyncZap()

	var outputDto = dtos.VulnerabilityOutput{}

	output, err := ConvertVulnerabilityOutput(outputDto)
	if err != nil {
		t.Errorf("TestOutputConvert failed: %v", err)
	}
	fmt.Printf("Output: %v\n", output)
}

func TestCpeOutputConvert(t *testing.T) {
	err := zlog.NewSugaredDevLogger()
	if err != nil {
		t.Fatalf("an error '%s' was not expected when opening a sugared logger", err)
	}
	defer zlog.SyncZap()

	var outputDto = dtos.CpeOutput{}
	output, err := ConvertCPEOutput(outputDto)
	if err != nil {
		t.Errorf("TestCpeOutputConvert failed: %v", err)
	}
	fmt.Printf("Output: %v\n", output)
}

func TestVulnInputConvert(t *testing.T) {
	ctx := context.Background()
	err := zlog.NewSugaredDevLogger()
	if err != nil {
		t.Fatalf("an error '%s' was not expected when opening a sugared logger", err)
	}
	defer zlog.SyncZap()
	db, err := sqlx.Connect("sqlite3", ":memory:")
	if err != nil {
		t.Fatalf("an error '%s' was not expected when opening a stub database connection", err)
	}
	defer models.CloseDB(db)
	conn, err := db.Connx(ctx) // Get a connection from the pool
	if err != nil {
		t.Fatalf("an error '%s' was not expected when opening a stub database connection", err)
	}
	defer models.CloseConn(conn)
	myConfig, err := myconfig.NewServerConfig(nil)
	if err != nil {
		t.Fatalf("failed to load Config: %v", err)
	}
	allUrlsModel := models.NewAllURLModel(
		ctx,
		zlog.S,
		conn,
		models.NewProjectModel(ctx, zlog.S, conn),
		models.NewGolangProjectModel(ctx, zlog.S, conn, myConfig))

	var vulnIn = &pb.VulnerabilityRequest{}
	_, sanitizedReq, err := ToVulnerabilityRequestDTO(vulnIn, allUrlsModel)

	if err != nil {
		t.Errorf("TestInputConvert failed: %v", err)
	}
	fmt.Printf("Input: %v\n", sanitizedReq)
}
