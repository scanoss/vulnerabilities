// SPDX-License-Identifier: GPL-2.0-or-later
/*
 * Copyright (C) 2018-2025 SCANOSS.COM
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

package adapters

import (
	"encoding/json"
	"errors"
	"fmt"

	"github.com/package-url/packageurl-go"
	pb "github.com/scanoss/papi/api/vulnerabilitiesv2"
	zlog "github.com/scanoss/zap-logging-helper/pkg/logger"
	"scanoss.com/vulnerabilities/pkg/models"
	"scanoss.com/vulnerabilities/pkg/utils"

	"scanoss.com/vulnerabilities/pkg/dtos"
)

// sanitizeRequest normalizes package URLs (PURLs) and their version requirements in a vulnerability request.
func sanitizeRequest(request *dtos.VulnerabilityRequestDTO, allUrlsModel *models.AllUrlsModel) ([]string, dtos.VulnerabilityRequestDTO) {
	var (
		badRequests       []string
		sanitizedRequests dtos.VulnerabilityRequestDTO
	)
	for _, purlInput := range request.Purls {
		sanitizedPurl, ok := processPurlInput(purlInput, allUrlsModel)
		if !ok {
			badRequests = append(badRequests, purlInput.Purl)
			continue
		}
		sanitizedRequests.Purls = append(sanitizedRequests.Purls, sanitizedPurl)
	}
	return badRequests, sanitizedRequests
}

// processPurlInput handles the sanitization of a single PURL input.
// Returns the sanitized PURL and a boolean indicating success.
func processPurlInput(input dtos.VulnPurlInput, allUrlsModel *models.AllUrlsModel) (dtos.VulnPurlInput, bool) {
	strippedPurl := utils.StripVersionFromPurl(input.Purl)
	purl, err := utils.PurlFromString(input.Purl)
	if err != nil {
		return dtos.VulnPurlInput{}, false
	}
	requirement := input.Requirement
	if requirement == "" {
		requirement = determineRequirement(purl, strippedPurl, allUrlsModel)
		if requirement == "" {
			return dtos.VulnPurlInput{}, false
		}
	}
	return dtos.VulnPurlInput{
		Purl:        strippedPurl,
		Requirement: utils.StripSemverOperator(requirement),
	}, true
}

// determineRequirement determines the version requirement for a PURL.
// Returns empty string if requirement cannot be determined.
func determineRequirement(purl packageurl.PackageURL, purlStr string, allUrlsModel *models.AllUrlsModel) string {
	if purl.Version != "" {
		return purl.Version
	}
	url, err := allUrlsModel.GetURLsByPurlString(purlStr, "")
	if err != nil {
		return ""
	}
	return url.Version
}

// ToVulnerabilityRequestDTO converts a Vulnerability Request structure into an internal Vulnerability Input struct.
func ToVulnerabilityRequestDTO(request *pb.VulnerabilityRequest, allUrlsModel *models.AllUrlsModel) ([]string, dtos.VulnerabilityRequestDTO, error) {
	data, err := json.Marshal(request)
	if err != nil {
		zlog.S.Errorf("Problem marshalling vulnerability request input: %v", err)
		return []string{}, dtos.VulnerabilityRequestDTO{}, errors.New("problem marshalling vulnerability input")
	}

	if len(data) == 0 {
		return []string{}, dtos.VulnerabilityRequestDTO{}, errors.New("no input vulnerability data supplied to parse")
	}
	var dtoRequest dtos.VulnerabilityRequestDTO
	err = json.Unmarshal(data, &dtoRequest)
	if err != nil {
		zlog.S.Errorf("Parse failure: %v", err)
		return []string{}, dtos.VulnerabilityRequestDTO{}, fmt.Errorf("failed to parse vulnerability input data: %v", err)
	}
	zlog.S.Debugf("Parsed data2: %v", data)

	badRequest, sanitizedReq := sanitizeRequest(&dtoRequest, allUrlsModel)
	return badRequest, sanitizedReq, nil
}

// ConvertVulnerabilityOutput converts an internal Vulnerability Output structure into a Vulnerability Response struct.
func ConvertVulnerabilityOutput(output dtos.VulnerabilityOutput) (*pb.VulnerabilityResponse, error) {
	data, err := json.Marshal(output)
	if err != nil {
		zlog.S.Errorf("Problem marshalling vulns request output: %v", err)
		return &pb.VulnerabilityResponse{}, errors.New("problem marshalling vulns output")
	}
	zlog.S.Debugf("Parsed data: %v", string(data))
	var vulnResp pb.VulnerabilityResponse
	err = json.Unmarshal(data, &vulnResp)
	if err != nil {
		zlog.S.Errorf("Problem unmarshalling Vulnerability request output: %v", err)
		return &pb.VulnerabilityResponse{}, errors.New("problem unmarshalling vulnerability output")
	}
	return &vulnResp, nil
}

// ConvertCPEOutput converts an internal CPE Output structure into a Cpe Response struct.
func ConvertCPEOutput(output dtos.CpeOutput) (*pb.CpeResponse, error) {
	data, err := json.Marshal(output)
	if err != nil {
		zlog.S.Errorf("Problem marshalling CPEs request output: %v", err)
		return &pb.CpeResponse{}, errors.New("problem marshalling CPEs output")
	}
	zlog.S.Debugf("Parsed data: %v", string(data))
	var cpeResp pb.CpeResponse
	err = json.Unmarshal(data, &cpeResp)
	if err != nil {
		zlog.S.Errorf("Problem unmarshalling CPEs request output: %v", err)
		return &pb.CpeResponse{}, errors.New("problem unmarshalling CPEs output")
	}
	return &cpeResp, nil
}
