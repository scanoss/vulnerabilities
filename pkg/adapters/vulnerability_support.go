// SPDX-License-Identifier: GPL-2.0-or-later
/*
 * Copyright (C) 2018-2025 SCANOSS.COM
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

package adapters

import (
	"encoding/json"
	"errors"
	"fmt"
	common "github.com/scanoss/papi/api/commonv2"

	"github.com/package-url/packageurl-go"
	pb "github.com/scanoss/papi/api/vulnerabilitiesv2"
	zlog "github.com/scanoss/zap-logging-helper/pkg/logger"
	"scanoss.com/vulnerabilities/pkg/models"
	"scanoss.com/vulnerabilities/pkg/utils"

	"scanoss.com/vulnerabilities/pkg/dtos"
)

type Component struct {
	Purl        string
	Requirement string
}

// sanitizeComponents normalizes package URLs (PURLs) and their version requirements from Component array.
func sanitizeComponents(components []dtos.Component, allUrlsModel *models.AllUrlsModel) ([]string, []dtos.Component) {
	var (
		badRequests []string
		sanitized   []dtos.Component
	)
	for _, comp := range components {
		component, ok := processComponentInput(comp.Purl, comp.Requirement, allUrlsModel)
		if !ok {
			badRequests = append(badRequests, comp.Purl)
			continue
		}
		sanitized = append(sanitized, component)
	}
	return badRequests, sanitized
}

// processPurlInput handles the sanitization of a single PURL input.
// Returns the sanitized PURL and a boolean indicating success.
func processComponentInput(purl string, requirement string, allUrlsModel *models.AllUrlsModel) (dtos.Component, bool) {
	strippedPurl := utils.StripVersionFromPurl(purl)
	p, err := utils.PurlFromString(purl)
	if err != nil {
		return dtos.Component{}, false
	}
	componentRequirement := requirement
	if requirement == "" {
		componentRequirement = determineRequirement(p, strippedPurl, allUrlsModel)
	}
	return dtos.Component{
		Purl:        strippedPurl,
		Requirement: componentRequirement,
	}, true
}

// determineRequirement determines the version requirement for a PURL.
// Returns empty string if requirement cannot be determined.
func determineRequirement(purl packageurl.PackageURL, purlStr string, allUrlsModel *models.AllUrlsModel) string {
	if purl.Version != "" {
		return purl.Version
	}
	url, err := allUrlsModel.GetURLsByPurlString(purlStr, "")
	if err != nil {
		return ""
	}
	return url.Version
}

// FromVulnerabilityRequestToComponentDTO converts a Vulnerability Request structure into an internal Vulnerability Input struct.
func FromVulnerabilityRequestToComponentDTO(request *pb.VulnerabilityRequest, allUrlsModel *models.AllUrlsModel) ([]string, []dtos.Component, error) {
	data, err := json.Marshal(request)
	if err != nil {
		zlog.S.Errorf("Problem marshalling vulnerability request input: %v", err)
		return []string{}, []dtos.Component{}, errors.New("problem marshalling vulnerability input")
	}

	if len(data) == 0 {
		return []string{}, []dtos.Component{}, errors.New("no input vulnerability data supplied to parse")
	}
	var dtoRequest dtos.VulnerabilityRequestDTO
	err = json.Unmarshal(data, &dtoRequest)
	if err != nil {
		zlog.S.Errorf("Parse failure: %v", err)
		return []string{}, []dtos.Component{}, fmt.Errorf("failed to parse vulnerability input data: %v", err)
	}
	zlog.S.Debugf("Parsed data2: %v", data)

	var components []dtos.Component
	for _, purl := range request.Purls {
		components = append(components, dtos.Component{Purl: purl.Purl, Requirement: purl.Requirement})
	}

	badRequests, sanitizedComponents := sanitizeComponents(components, allUrlsModel)
	return badRequests, sanitizedComponents, nil
}

// ConvertVulnerabilityOutput converts an internal Vulnerability Output structure into a Vulnerability Response struct.
func ConvertVulnerabilityOutput(output dtos.VulnerabilityOutput) (*pb.VulnerabilityResponse, error) {
	data, err := json.Marshal(output)
	if err != nil {
		zlog.S.Errorf("Problem marshalling vulns request output: %v", err)
		return &pb.VulnerabilityResponse{}, errors.New("problem marshalling vulns output")
	}
	zlog.S.Debugf("Parsed data: %v", string(data))
	var vulnResp pb.VulnerabilityResponse
	err = json.Unmarshal(data, &vulnResp)
	if err != nil {
		zlog.S.Errorf("Problem unmarshalling Vulnerability request output: %v", err)
		return &pb.VulnerabilityResponse{}, errors.New("problem unmarshalling vulnerability output")
	}
	return &vulnResp, nil
}

// ConvertCPEOutput converts an internal CPE Output structure into a Cpe Response struct.
func ConvertCPEOutput(output []dtos.CpeComponentOutput) (*pb.CpeResponse, error) {
	data, err := json.Marshal(output)
	if err != nil {
		zlog.S.Errorf("Problem marshalling CPEs request output: %v", err)
		return &pb.CpeResponse{}, errors.New("problem marshalling CPEs output")
	}
	zlog.S.Debugf("Parsed data: %v", string(data))
	var cpeResp pb.CpeResponse
	err = json.Unmarshal(data, &cpeResp)
	if err != nil {
		zlog.S.Errorf("Problem unmarshalling CPEs request output: %v", err)
		return &pb.CpeResponse{}, errors.New("problem unmarshalling CPEs output")
	}
	return &cpeResp, nil
}

// ToComponentCPESDTO converts a Vulnerability Request structure into an internal Vulnerability Input struct.
func ToComponentCPESDTO(request *common.ComponentRequest, allUrlsModel *models.AllUrlsModel) ([]string, dtos.Component, error) {
	data, err := json.Marshal(request)
	if err != nil {
		zlog.S.Errorf("Problem marshalling component CPE request input: %v", err)
		return []string{}, dtos.Component{}, errors.New("problem marshalling component CPE request input")
	}

	if len(data) == 0 {
		return []string{}, dtos.Component{}, errors.New("no input vulnerability data supplied to parse")
	}
	var dtoRequest dtos.Component
	err = json.Unmarshal(data, &dtoRequest)
	if err != nil {
		zlog.S.Errorf("Parse failure: %v", err)
		return []string{}, dtos.Component{}, fmt.Errorf("failed to parse vulnerability input data: %v", err)
	}
	zlog.S.Debugf("Parsed data2: %v", data)

	badRequest, sanitizedComponents := sanitizeComponents([]dtos.Component{dtoRequest}, allUrlsModel)

	return badRequest, sanitizedComponents[0], nil
}

// ConvertToCPEComponentResponse converts an internal CPE Output structure into a Cpe Response struct.
func ConvertToCPEComponentCPEInfo(output []dtos.CpeComponentOutput) ([]*pb.ComponentCpesInfo, error) {
	data, err := json.Marshal(output)
	if err != nil {
		zlog.S.Errorf("Problem marshalling CPEs request output: %v", err)
		return nil, errors.New("problem marshalling CPEs output")
	}

	zlog.S.Debugf("Parsed data: %v", string(data))

	var resp []*pb.ComponentCpesInfo  // Fixed: correct type for slice
	err = json.Unmarshal(data, &resp) // Fixed: use 'resp' variable
	if err != nil {
		zlog.S.Errorf("Problem unmarshalling CPEs request output: %v", err)
		return nil, errors.New("problem unmarshalling CPEs output") // Fixed: return nil
	}

	return resp, nil
}
